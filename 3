import React, { Component } from 'react';
import Fruit from './Fruit';
import BodySegment from './BodySegment';
import './App.css';

class App extends Component {
  constructor(props){
    super(props)
    this.size = 20;
    this.boardHeight = window.screen.availHeight;
    this.boardWidth = window.screen.availWidth;
    this.state = {
      intervalId: '',
      speed: 100,
      segments: [[]],
      fruitLocation: [-10, -10],
      keypress: '',
    }
  }

  logKey(e){
    e.preventDefault();
    this.setState({
      keypress: e.key
    });
  }

  newSegment(oldSegments){
    switch(this.state.keypress) {
      case 'ArrowUp':
        return [oldSegments[0] - this.size, oldSegments[1]]
        break;
      case 'ArrowDown':
        return [oldSegments[0] + this.size, oldSegments[1]]
        break;
      case 'ArrowRight':
        return [oldSegments[0], oldSegments[1] + this.size]
        break;
      case 'ArrowLeft':
        return [oldSegments[0], oldSegments[1] - this.size]
        break;
      default:
        return [oldSegments[0], oldSegments[1] + this.size]
    }
  }

  getNewSegments(){
    let oldSegments = this.state.segments
    oldSegments.unshift(this.newSegment(oldSegments[0]))
    return oldSegments
  }

  tick(){
    if(this.gameOver()){
      console.log('top ' + this.segments[0][0]);
    }

    let newFruitLocation = this.state.fruitLocation
    let newSegments = this.getNewSegments()
    if(!this.ateFruit()){
      newSegments.pop()
    }else{
      let whee = Math.floor(Math.random() * 50) * this.size;
      let whoa = Math.floor(Math.random() * 50) * this.size;
      newFruitLocation = [whee, whoa]
    };
    this.setState({segments: newSegments, fruitLocation: newFruitLocation})
  }

  gameOver(){
    var whee = this.state.segments[0][0]
    var whoa = this.state.segments[0][1]
    return (whee < 0 || whee > this.boardWidth) || ( whoa < 0 || whoa > this.boardHeight)
  }

  ateFruit(){
    let head = this.state.segments[0];
    let fruit = this.state.fruitLocation;
    return (head[1] === fruit[1]) && (head[0] === fruit[0])
  }

  startGame(){
    clearInterval(this.state.intervalId);
    let newIntervalId = setInterval(()=>{this.tick()}, this.state.speed);
    this.setState({
      intervalId: newIntervalId,
      segments: [[Math.ceil(this.boardHeight/2), Math.ceil(this.boardWidth/2)]],
      keypress: 'ArrowRight',
      fruitLocation: [300, 300]}
    );
  }

  componentDidMount(){
    console.log('width' + this.boardWidth);
    console.log('height' + this.boardHeight);

    console.log('width half' + this.boardWidth/2);
    console.log('height half' + this.boardHeight/2);
  }

  render() {
    let segments = this.state.segments.map((seg, i) =>
      <BodySegment
        key= {i}
        size= { this.size }
        location={seg}
      />
    )
    return (
      <div className="App" onKeyDown={(e)=>{this.logKey(e)}} tabIndex='0'>
        <h1>{this.state.segments[0].join(' ')}</h1>
        <Fruit
          size={ this.size }
          top={ this.state.fruitLocation[0] }
          left={ this.state.fruitLocation[1] }
        />
        { segments }
        <div className='buttonBar'>
          <button className='button' onClick={(e)=>{this.startGame()}}>Start</button>
        </div>
      </div>
    );
  }
}

export default App;
